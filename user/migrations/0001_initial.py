# Generated by Django 4.1.7 on 2023-03-07 13:15

import uuid

import django.db.models.manager
import django.utils.timezone
from django.db import migrations, models

import user.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='PasswordResetWhitelist',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('active', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('email', models.EmailField(max_length=254)),
                ('token', models.CharField(max_length=255)),
            ],
            options={
                'unique_together': {('email', 'token')},
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('active', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('first_name', models.CharField(max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(max_length=150, verbose_name='last name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email')),
                ('user_type', models.CharField(choices=[('PATIENT', 'patient'), ('ADMIN', 'admin')], default='PATIENT', max_length=20, verbose_name='user type')),
                ('is_verified', models.BooleanField(default=False, verbose_name='is verified')),
                ('user_login_token', models.CharField(blank=True, max_length=200, null=True)),
                ('street', models.CharField(blank=True, max_length=100, null=True, verbose_name='street')),
                ('state', models.CharField(blank=True, max_length=50, null=True, verbose_name='state')),
                ('city', models.CharField(blank=True, max_length=100, null=True, verbose_name='city')),
                ('country', models.CharField(default='NG', max_length=50, verbose_name='country')),
                ('region', models.CharField(choices=[('AF', 'Africa'), ('AS', 'Asia'), ('EU', 'Europe'), ('ME', 'Middle East'), ('NA', 'North America'), ('SA', 'South America')], default='AF', max_length=50, verbose_name='region')),
                ('contact_no', models.CharField(max_length=20, verbose_name='contact no')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='date of birth')),
                ('gender', models.CharField(choices=[('MALE', 'male'), ('FEMALE', 'female'), ('OTHER', 'other'), ('PREFER NOT TO SAY', 'preder not to say')], default='PREFER NOT TO SAY', max_length=30, verbose_name='gender')),
                ('image', models.ImageField(blank=True, null=True, upload_to='profile_photo')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', user.managers.UserCustomManager()),
            ],
        ),
    ]
